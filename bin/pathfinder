#!/usr/bin/env ruby

require 'bundler/setup'

require_relative '../lib/pathfinder'
require 'optparse'

options = OpenStruct.new( without_face: false, quiet: false, log_level: Logger::Severity::ERROR )

options_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on("--file MANDATORY", "WKT file containing noded lines") { |v| options.file = v }
  opts.on("--without-face", "witout face reduction") { |v| options.without_face = true  }
  opts.on("--quiet", "surpress final output") { |v| options.quiet = true }
  opts.on("--log [OPTIONAL]", "Turn on logging, specify file or STDERR is default") { |v|
    options.log = v ? File.open(v, 'a') : STDERR
  }
  opts.on("--log-level MANDATORY", "Log level: debug, info, warn, error, fatal") { |v|
    options.log ||= STDERR
    level = {
      debug: Logger::Severity::DEBUG,
      info: Logger::Severity::INFO,
      warn: Logger::Severity::WARN,
      error: Logger::Severity::ERROR,
      fatal: Logger::Severity::FATAL
    }[v.to_sym]

    if level.nil?
      $stderr.puts "Log level #{v} unknown, defaulting to 'error'"
      level = Logger::Severity::ERROR
    end
    options.log_level = level.to_i
  }
end

begin
  options_parser.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts e
  exit 1
end

if options.file.nil?
  puts "USAGE: #{File.basename $0} path/to/wkt"
  exit 1
end

begin
  Pathfinder.configure options
  Pathfinder.run
rescue java.io.FileNotFoundException => e
  puts "ERROR: #{e}"
  exit 2
end


